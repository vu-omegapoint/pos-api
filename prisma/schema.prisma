generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String      @id @default(uuid())
  name          String
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactInfoId String      @unique
  address       Address     @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId     String      @unique
  orders        Order[]
}

model ContactInfo {
  id       String    @id @default(uuid())
  email    String
  phone    String?
  customer Customer?
}

model Address {
  id       String    @id @default(uuid())
  street   String?
  city     String
  state    String?
  zip      String?
  customer Customer?
}

model Item {
  id              String       @id @default(uuid())
  name            String
  description     String?
  price           Decimal
  bookedInstances BookedItem[]
}

model BookedItem {
  id         String   @id @default(uuid())
  quantity   Int
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String   @unique
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId     String   @unique
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId    String   @unique
}

model Service {
  id              String          @id @default(uuid())
  name            String
  description     String?
  price           Decimal
  duration        Decimal
  bookedInstances BookedService[]
}

model BookedService {
  id         String   @id @default(uuid())
  startTime  DateTime
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String   @unique
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId  String   @unique
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId    String   @unique
}

model Order {
  id         String          @id @default(uuid())
  createdAt  DateTime        @default(now())
  items      BookedItem[]
  services   BookedService[]
  customer   Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String
  status     String          @default("pending")
  notes      String?
}

model Employee {
  id              String          @id @default(uuid())
  name            String
  permissions     Permission[]
  schedule        WorkShift[]
  servicesCatered BookedService[]
  itemsCatered    BookedItem[]
}

model Permission {
  name       String
  // Prisma doesn't support enums for SQLite. 
  // https://github.com/prisma/prisma/issues/2219
  level      String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String

  @@id([name, employeeId])
}

model WorkShift {
  weekday    String
  startTime  String
  endTime    String
  employee   Employee @relation(references: [id], fields: [employeeId], onDelete: Cascade, onUpdate: Cascade)
  employeeId String

  @@id([weekday, employeeId])
}
